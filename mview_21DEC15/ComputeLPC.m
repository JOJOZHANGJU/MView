function [p,f,g,a] = ComputeLPC(s, offset, order, mu, win, frame)%COMPUTELPC  - compute LPC spectrum%%	usage:  [p,f,g,a] = ComputeLPC(s, offset, order, mu, win, frame)%% given signal S this procedure computes LPC spectrum P in dB at specified OFFSET (msecs)% optionally returns corresponding frequency bins F (Hz)% and filter coefficients G, A%% optional ORDER defaults to sampling rate in kHz + 4% optional pre-emphasis factor MU defaults to .98% optional window size WIN defaults to 30 msecs% optional FRAME size (resolution of power computation) defaults to 256%% S may be an AUDIO object, a MAVIS-compatible array of structs (first element % assumed to be audio), or a {S,SRATE} cell object%% see also AVGSPEC% mkt 04/01% parse argsif nargin < 2, 	eval('help ComputeLPC');	return;end;if isa(s,'audio'),	sr = s.SRATE;	s = double(s);elseif isstruct(s),	sr = s(1).SRATE;	s = s(1).SIGNAL;elseif iscell(s),	sr = s{2};	s = s{1};else,	error('argument error (signal)');end;if nargin<3 || isempty(order), order = round(sr/1000) + 4; end;if nargin<4 || isempty(mu), mu = .98; end;if nargin<5 || isempty(win), win = 30; end;if nargin<6 || isempty(frame), frame = 256; end;% get analysis framewins = round(win*sr/1000);offs = floor(offset*sr/1000)-1;ht = round([-wins/2 wins/2]+offs);if ht(1) < 1,	ht = [1 wins];elseif ht(2) > length(s),	ht = length(s) - [wins+1 0];end;s = s(ht(1):ht(2));% remove DC biass = s - mean(s);% pre-emphasizeif mu > 0,	s = filter([1 -mu], 1, s);				% s[n] = s[n] - mu*s[n-1]	s = [s(2:end);s(end)];					% fix filter delayend;% compute LPCs = s .* hamming(length(s));R = flipud(fftfilt(conj(s),flipud(s)));		% unbiased autocorrelation estimatea = levinson(R, order);						% LPCg = sqrt(real(sum((a').*R(1:order+1,:))));	% gain[p,f] = freqz(g, a, frame, sr);p = 20*log10(abs(p/20+eps));